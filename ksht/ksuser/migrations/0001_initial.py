# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-12-15 02:28
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userid', models.BigIntegerField(default=0, unique=True, verbose_name='用户ID')),
                ('integral', models.IntegerField(default=0, verbose_name='积分')),
                ('credit', models.IntegerField(default=100, verbose_name='信用度')),
                ('reg_time', models.DateTimeField(auto_now_add=True, verbose_name='注册时间')),
                ('validate', models.BooleanField(default=False, verbose_name='是否验证')),
                ('isvip', models.BooleanField(default=False, verbose_name='是否是VIP')),
                ('viptime', models.DateTimeField(blank=True, null=True, verbose_name='VIP到期时间')),
                ('viplevel', models.IntegerField(choices=[(0, '普通用户'), (1, '黄金会员'), (2, '白金会员'), (3, '钻石会员')], default=0, verbose_name='VIP等级')),
                ('total_photo', models.IntegerField(default=0, verbose_name='推广作品数')),
                ('total_like', models.IntegerField(default=0, verbose_name='获得喜欢总数')),
                ('total_comment', models.IntegerField(default=0, verbose_name='获得评论总数')),
                ('comment_deny', models.BooleanField(default=True, verbose_name='禁止评论')),
                ('activetime', models.DateTimeField(auto_now=True, verbose_name='最后一次活跃时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('referee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referees_set', to=settings.AUTH_USER_MODEL, verbose_name='推荐人')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='IntegralEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, '点赞'), (2, '被点赞'), (3, '评论'), (4, '被评论'), (5, '关注'), (6, '被关注'), (7, '充值积分'), (8, '邀请用户'), (9, '热门分析'), (10, '邀请用户'), (11, '下单'), (12, '垃圾消息')], verbose_name='事件类型')),
                ('integral', models.IntegerField(default=0, verbose_name='积分变化')),
                ('remark', models.CharField(default='', max_length=500, verbose_name='备注')),
                ('time', models.DateTimeField(auto_now=True, verbose_name='时间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='积分变化的用户')),
            ],
        ),
        migrations.CreateModel(
            name='TGUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner_head', models.CharField(default='', max_length=256)),
                ('tgtime', models.DateTimeField(verbose_name='推广时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='推广用户')),
            ],
        ),
    ]
